#!/usr/bin/env ruby
# vim: set fileencoding=utf-8 :
$VERBOSE = true

require 'optparse'
require 'thread'
require 'rubygems'
require 'mechanize'
require 'twitter'

opt = OptionParser.new( "#{$PROGRAM_NAME}: [options...] http://atnd.org/events/EVENT_ID")
opts = { #default options
  :list_name => nil,
  :evt_service => :atnd,
  :token_path => 'token.txt',
  :follow => false
}
begin
  opt.on('-l', '--list-name=LIST_NAME',
         "The name of twitter list to create or to add. When not specified, don't make the list."){|v| opts[:list_name] = v }
  opt.on('-f', '--[no-]follow', 'Follow the listed people. Default: FALSE.'){|v| opts[:follow] = v }
  opt.on('-e', '--event-service=SERVICE_NAME', 'The event page is of SERVICE_NAME'){|v| opts[:evt_service] = v.to_sym }
  opt.on('-t', '--token=TOKEN_FILE', 'token file.'){|v| opts[:token_path] = v }
  opt.order!(ARGV)
rescue OptionParser::ParseError
  fail "#$PROGRAM_NAME: unrecognized option found. See '#$PROGRAM_NAME --help' for the available options."
end
evt_uri = ARGV.shift
SERVICES = {
  :atnd => {
    :host => 'atnd.org',
    :member_sel => '.member_name>li>a',
    :tw_id_sel => "//div[@id='user_info']/dl/dt[.='Twitter ID']/../dd/a",
  }
}

HREF = 'href'
agent = Mechanize.new
service = opts[:evt_service]
member_sel = SERVICES[service][:member_sel]
tw_id_sel = SERVICES[service][:tw_id_sel]

tw_ids_q = Queue.new

Thread.abort_on_exception = true
THREAD = Thread.new{
  agent.get( evt_uri ).search( member_sel ).each{|a|
    page = agent.get(a[HREF])
    Thread.new{
      tw_ids_q << page.at( tw_id_sel ).inner_text
    }
  }
}
class << tw_ids_q
  def each &block
    block[ self.deq ] while THREAD.alive?
    block[ self.deq ] until self.empty?
  end
end

ct_f = File.open(opts[:token_path])
ck, cs, at, as, user_id = ct_f.readlines
oa = Twitter::OAuth.new ck.chomp, cs.chomp
oa.authorize_from_access at.chomp, as.chomp

tw = Twitter::Base.new oa #old version of twitter.rb. deprecated since ver 1.0

tw_ids = []
at_ids = nil
get_at_ids = lambda{ at_ids ||= tw_ids.map{|id| '@' + id }.join( ' ' ) }

def no_twitter_err? &block
  begin
    block.call
    true
  rescue Twitter::General => err
    warn err
    false
  end
end

if opts[:list_name]
  tw_ids_q.each{|id|
    no_twitter_err?{
      tw.list_add_member user_id.chomp, opts[:list_name], id
    } and tw_ids << id
  }
  puts "Added to '#{opts[:list_name]}':", get_at_ids.call
end

if opts[:follow]
  create_friends = lambda {|tw_ids_enum|
    tw_ids_enum.each{|id|
      no_twitter_err?{
        tw.friendship_create id
      } and tw_ids << id
    }
  }
  if tw_ids.empty? 
    create_friends[tw_ids_q]
  else
    create_friends[tw_ids]
  end
  puts "Followed people: ", get_at_ids.call
end
